name: Test => Build => Deploy


on: push


jobs:
  lint-python:
    name: Lint Python
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - run: npm ci
      - uses: actions/setup-python@v2
        id: setup-python
        with:
          python-version: ${{ matrix.python-version }}
      - uses: Gr1N/setup-poetry@v7
      - uses: actions/cache@v2.1.6
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Ensure Cache Is Healthy
        if: runner.os != 'Windows' && steps.cache.outputs.cache-hit == 'true'
        run: poetry run pip --version > /dev/null 2>&1 || rm -rf .venv
      - run: poetry install -vv --remove-untracked
      - run: make lint
  pre-commit:
    name: pre-commit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        id: setup-python
        with:
          python-version: ${{ matrix.python-version }}
      - uses: Gr1N/setup-poetry@v7
      - uses: actions/cache@v2.1.6
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Ensure Cache Is Healthy
        if: runner.os != 'Windows' && steps.cache.outputs.cache-hit == 'true'
        run: poetry run pip --version > /dev/null 2>&1 || rm -rf .venv
      - run: poetry install -vv --remove-untracked
      - uses: pre-commit/action@v2.0.3
