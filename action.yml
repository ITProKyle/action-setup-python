name: Setup Python and Poetry
description: Setup a specific version of Python & Poetry with virtual environment caching.
author: Kyle Finley
branding:
  color: purple
  icon: cloud-lightning


inputs:
  architecture:
    description: The target architecture (x86, x64) of the Python interpreter.
  cache-key-suffix:
    description: |
      Temporary input to allow for slight customization of the cache key until full customization can be provided.
    required: false
  ensure-cache-is-healthy:
    description: |
      Ensure the cached Python virtual environment is healthy.
      In most cases, this should be left set to `true` (default). _(non-Windows only)_
    required: false
    default: true
  poetry-check:
    description: Whether validate the content of the `pyproject.toml` file and its consistency with the `poetry.lock` file.
    required: false
    default: true
  poetry-check-cmd:
    description: |
      The poetry command to run when checking the lock file (e.g. `check`).
      This command was changed in poetry 1.6 (default used by this action).
      To support older versions of poetry, provide a value for this input.
    required: false
    default: check
  poetry-install:
    description: Whether to run `poetry install`.
    required: false
    default: true
  poetry-install-args:
    description: Additional args to pass to `poetry install`.
    required: false
    default: '-v --sync'
  poetry-install-cmd:
    description: |
      Command for installing poetry project.
      Can be used to provide a custom install command.
      The value of `poetry-install-args` is appended after this.
    required: false
    default: poetry install
  poetry-preview:
    description: Allow install of prerelease versions of Poetry.
    required: false
    default: false
  poetry-version:
    description: Poetry version to use. If version is not provided then latest stable version will be used.
    required: false
  python-version:
    description: Version range or exact version of a Python version to use, using semver version range syntax. Reads from pyproject.toml if unset.
    default: ${{ null }}
    required: false
  python-version-file:
    description: File containing the Python version to use.
    default: pyproject.toml
    required: false
  token:
    description: Used to pull python distributions from actions/python-versions. Since there's a default, this is typically not supplied by the user.
    default: ${{ github.token }}


outputs:
  cache-hit:
    description: Whether there was a cache hit for the Python virtual environment.
    value: ${{ steps.composite-python-venv-cache.outputs.cache-hit }}
  python-version:
    description: The installed Python version. Useful when given a version range as input.
    value: ${{ steps.composite-setup-python.outputs.python-version }}


runs:
  using: composite
  steps:
    - id: composite-setup-python-explicit
      if: inputs.python-version != ''
      uses: actions/setup-python@v5
      with:
        architecture: ${{ inputs.architecture }}
        python-version: ${{ inputs.python-version }}
        token: ${{ inputs.token }}
    - id: composite-setup-python-file
      if: inputs.python-version == ''
      uses: actions/setup-python@v5
      with:
        architecture: ${{ inputs.architecture }}
        python-version-file: ${{ inputs.python-version-file }}
        token: ${{ inputs.token }}
    - id: composite-setup-python
      shell: bash
      run: |
        if [[ -n "${{ steps.composite-setup-python-explicit.outputs.python-version }}" ]]; then
          echo "python-version=${{ steps.composite-setup-python-explicit.outputs.python-version }}" >> $GITHUB_OUTPUT;
        else
          echo "python-version=${{ steps.composite-setup-python-file.outputs.python-version }}" >> $GITHUB_OUTPUT;
        fi
        export POETRY_HOME="${HOME}/.local/share/pypoetry";
        mkdir -p $POETRY_HOME;
        echo "POETRY_HOME=$POETRY_HOME" >> $GITHUB_ENV;
        echo "poetry-home=$POETRY_HOME" >> $GITHUB_OUTPUT;
    - id: composite-setup-poetry
      uses: Gr1N/setup-poetry@v9
      with:
        poetry-preview: ${{ inputs.poetry-preview }}
        poetry-version: ${{ inputs.poetry-version }}
    - id: composite-poetry-plugins
      run: |
        $POETRY_HOME/bin/pip install --user poetry-plugin-export;
    - id: composite-python-venv-cache
      uses: actions/cache@v4.0.2
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.composite-setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}${{ inputs.cache-key-suffix }}
    - name: Ensure Cache Is Healthy
      if: |
        always() &&
        inputs.ensure-cache-is-healthy == 'true' &&
        runner.os != 'Windows' &&
        steps.composite-python-venv-cache.outputs.cache-hit == 'true'
      run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv
      shell: bash
    - name: Check pyproject.toml & poetry.lock
      if: inputs.poetry-check == 'true'
      env:
        POETRY_CHECK_CMD: ${{ inputs.poetry-check-cmd }}
      run: poetry ${POETRY_CHECK_CMD}
      shell: bash
    - name: Install Dependencies
      if: inputs.poetry-install == 'true'
      env:
          POETRY_INSTALL_ARGS: ${{ inputs.poetry-install-args }}
          POETRY_INSTALL_CMD: ${{ inputs.poetry-install-cmd }}
      run: |
        if [[ -f "Makefile" ]] && grep -q 'setup-poetry:' Makefile; then
          echo "installing project using Makefile...";
          make setup-poetry;
        else
          ${POETRY_INSTALL_CMD} ${POETRY_INSTALL_ARGS};
        fi
      shell: bash
